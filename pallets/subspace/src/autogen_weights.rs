
//! Autogenerated weights for `pallet_subspace`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-11-29, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `178-63-79-120.ptr`, CPU: `Intel(R) Core(TM) i9-9900K CPU @ 3.60GHz`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: `1024`

// Executed Command:
// ./target/release/node-subspace
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet_subspace
// --extrinsic
// *
// --steps
// 20
// --repeat
// 10
// --wasm-execution=compiled
// --template
// ./.maintain/frame-weight-template.hbs
// --output
// pallets/subspace/src/autogen_weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use core::marker::PhantomData;

/// Weight functions needed for `pallet_subspace`.
pub trait WeightInfo {
	fn register() -> Weight;
	fn set_weights() -> Weight;
	fn add_stake() -> Weight;
	fn add_stake_multiple() -> Weight;
	fn transfer_stake() -> Weight;
	fn transfer_multiple() -> Weight;
	fn remove_stake() -> Weight;
	fn remove_stake_multiple() -> Weight;
	fn update_network() -> Weight;
	fn remove_network() -> Weight;
	fn update_module() -> Weight;
	fn update_global() -> Weight;
}

/// Weights for `pallet_subspace` using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: `SubspaceModule::N` (r:2 w:1)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedSubnets` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::MinStake` (r:2 w:1)
	/// Proof: `SubspaceModule::MinStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RegistrationsPerBlock` (r:1 w:1)
	/// Proof: `SubspaceModule::RegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetNamespace` (r:1 w:1)
	/// Proof: `SubspaceModule::SubnetNamespace` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:1 w:1)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:1 w:1)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:1 w:1)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Founder` (r:1 w:1)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VotePeriod` (r:1 w:0)
	/// Proof: `SubspaceModule::VotePeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteThreshold` (r:1 w:0)
	/// Proof: `SubspaceModule::VoteThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalSubnets` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Emission` (r:1 w:1)
	/// Proof: `SubspaceModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Incentive` (r:1 w:1)
	/// Proof: `SubspaceModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Dividends` (r:1 w:1)
	/// Proof: `SubspaceModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubspaceModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::DelegationFee` (r:1 w:1)
	/// Proof: `SubspaceModule::DelegationFee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:1 w:1)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RegistrationBlock` (r:0 w:1)
	/// Proof: `SubspaceModule::RegistrationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Address` (r:0 w:1)
	/// Proof: `SubspaceModule::Address` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Names` (r:0 w:1)
	/// Proof: `SubspaceModule::Names` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Keys` (r:0 w:1)
	/// Proof: `SubspaceModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:0 w:1)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4235`
		//  Estimated: `10175`
		// Minimum execution time: 226_791_000 picoseconds.
		Weight::from_parts(235_709_000, 10175)
			.saturating_add(T::DbWeight::get().reads(27_u64))
			.saturating_add(T::DbWeight::get().writes(26_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:1 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:1 w:0)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:1 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Keys` (r:10 w:0)
	/// Proof: `SubspaceModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubspaceModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Weights` (r:0 w:1)
	/// Proof: `SubspaceModule::Weights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1926`
		//  Estimated: `27666`
		// Minimum execution time: 98_562_000 picoseconds.
		Weight::from_parts(103_811_000, 27666)
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:1 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:1 w:1)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2256`
		//  Estimated: `5721`
		// Minimum execution time: 100_278_000 picoseconds.
		Weight::from_parts(101_628_000, 5721)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::Uids` (r:10 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:10 w:10)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:10 w:10)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_stake_multiple() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4768`
		//  Estimated: `30508`
		// Minimum execution time: 589_265_000 picoseconds.
		Weight::from_parts(616_888_000, 30508)
			.saturating_add(T::DbWeight::get().reads(33_u64))
			.saturating_add(T::DbWeight::get().writes(23_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:2 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:2 w:2)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:2 w:2)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	fn transfer_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2498`
		//  Estimated: `8438`
		// Minimum execution time: 153_109_000 picoseconds.
		Weight::from_parts(160_483_000, 8438)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `System::Account` (r:11 w:11)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	fn transfer_multiple() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `12202`
		//  Estimated: `29403`
		// Minimum execution time: 431_499_000 picoseconds.
		Weight::from_parts(435_439_000, 29403)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(11_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:1 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:1 w:1)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	fn remove_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2256`
		//  Estimated: `5721`
		// Minimum execution time: 91_246_000 picoseconds.
		Weight::from_parts(92_048_000, 5721)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:10 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:10 w:10)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:10 w:10)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	fn remove_stake_multiple() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5046`
		//  Estimated: `30786`
		// Minimum execution time: 510_161_000 picoseconds.
		Weight::from_parts(524_134_000, 30786)
			.saturating_add(T::DbWeight::get().reads(33_u64))
			.saturating_add(T::DbWeight::get().writes(23_u64))
	}
	/// Storage: `SubspaceModule::SubnetNamespace` (r:3 w:0)
	/// Proof: `SubspaceModule::SubnetNamespace` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Founder` (r:1 w:1)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:1 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:0 w:1)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinStake` (r:0 w:1)
	/// Proof: `SubspaceModule::MinStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:0 w:1)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_network() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `703`
		//  Estimated: `9118`
		// Minimum execution time: 48_823_000 picoseconds.
		Weight::from_parts(49_470_000, 9118)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: `SubspaceModule::SubnetNamespace` (r:3 w:1)
	/// Proof: `SubspaceModule::SubnetNamespace` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Founder` (r:1 w:1)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:1 w:1)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:2 w:1)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::Names` (r:1 w:1)
	/// Proof: `SubspaceModule::Names` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Address` (r:1 w:1)
	/// Proof: `SubspaceModule::Address` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:1 w:1)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Keys` (r:1 w:1)
	/// Proof: `SubspaceModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalSubnets` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::LastUpdate` (r:0 w:1)
	/// Proof: `SubspaceModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:0 w:1)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinStake` (r:0 w:1)
	/// Proof: `SubspaceModule::MinStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Dividends` (r:0 w:1)
	/// Proof: `SubspaceModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Incentive` (r:0 w:1)
	/// Proof: `SubspaceModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Trust` (r:0 w:1)
	/// Proof: `SubspaceModule::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Emission` (r:0 w:1)
	/// Proof: `SubspaceModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:0 w:1)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_network() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4709`
		//  Estimated: `13124`
		// Minimum execution time: 186_506_000 picoseconds.
		Weight::from_parts(189_186_000, 13124)
			.saturating_add(T::DbWeight::get().reads(16_u64))
			.saturating_add(T::DbWeight::get().writes(24_u64))
	}
	/// Storage: `SubspaceModule::SubnetNamespace` (r:3 w:0)
	/// Proof: `SubspaceModule::SubnetNamespace` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:1 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Names` (r:2 w:1)
	/// Proof: `SubspaceModule::Names` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Address` (r:0 w:1)
	/// Proof: `SubspaceModule::Address` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_module() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `706`
		//  Estimated: `9121`
		// Minimum execution time: 62_618_000 picoseconds.
		Weight::from_parts(64_586_000, 9121)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: `SubspaceModule::MaxAllowedSubnets` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedModules` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedModules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxRegistrationsPerBlock` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TxRateLimit` (r:0 w:1)
	/// Proof: `SubspaceModule::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxNameLength` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::UnitEmission` (r:0 w:1)
	/// Proof: `SubspaceModule::UnitEmission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_global() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 18_959_000 picoseconds.
		Weight::from_parts(19_511_000, 0)
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
}

// For backwards compatibility and tests.
impl WeightInfo for () {
	/// Storage: `SubspaceModule::N` (r:2 w:1)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedSubnets` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::MinStake` (r:2 w:1)
	/// Proof: `SubspaceModule::MinStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RegistrationsPerBlock` (r:1 w:1)
	/// Proof: `SubspaceModule::RegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxRegistrationsPerBlock` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::SubnetNamespace` (r:1 w:1)
	/// Proof: `SubspaceModule::SubnetNamespace` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:1 w:1)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:1 w:1)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:1 w:1)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:1 w:1)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Founder` (r:1 w:1)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VotePeriod` (r:1 w:0)
	/// Proof: `SubspaceModule::VotePeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::VoteThreshold` (r:1 w:0)
	/// Proof: `SubspaceModule::VoteThreshold` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalSubnets` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Emission` (r:1 w:1)
	/// Proof: `SubspaceModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Incentive` (r:1 w:1)
	/// Proof: `SubspaceModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Dividends` (r:1 w:1)
	/// Proof: `SubspaceModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubspaceModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::DelegationFee` (r:1 w:1)
	/// Proof: `SubspaceModule::DelegationFee` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:1 w:1)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::RegistrationBlock` (r:0 w:1)
	/// Proof: `SubspaceModule::RegistrationBlock` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Address` (r:0 w:1)
	/// Proof: `SubspaceModule::Address` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Names` (r:0 w:1)
	/// Proof: `SubspaceModule::Names` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Keys` (r:0 w:1)
	/// Proof: `SubspaceModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:0 w:1)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn register() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4235`
		//  Estimated: `10175`
		// Minimum execution time: 226_791_000 picoseconds.
		Weight::from_parts(235_709_000, 10175)
			.saturating_add(RocksDbWeight::get().reads(27_u64))
			.saturating_add(RocksDbWeight::get().writes(26_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:1 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:1 w:0)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:1 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Keys` (r:10 w:0)
	/// Proof: `SubspaceModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::LastUpdate` (r:1 w:1)
	/// Proof: `SubspaceModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Weights` (r:0 w:1)
	/// Proof: `SubspaceModule::Weights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_weights() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1926`
		//  Estimated: `27666`
		// Minimum execution time: 98_562_000 picoseconds.
		Weight::from_parts(103_811_000, 27666)
			.saturating_add(RocksDbWeight::get().reads(16_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:1 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:1 w:1)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2256`
		//  Estimated: `5721`
		// Minimum execution time: 100_278_000 picoseconds.
		Weight::from_parts(101_628_000, 5721)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::Uids` (r:10 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:10 w:10)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:10 w:10)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn add_stake_multiple() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4768`
		//  Estimated: `30508`
		// Minimum execution time: 589_265_000 picoseconds.
		Weight::from_parts(616_888_000, 30508)
			.saturating_add(RocksDbWeight::get().reads(33_u64))
			.saturating_add(RocksDbWeight::get().writes(23_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:2 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:2 w:2)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:2 w:2)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	fn transfer_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2498`
		//  Estimated: `8438`
		// Minimum execution time: 153_109_000 picoseconds.
		Weight::from_parts(160_483_000, 8438)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `System::Account` (r:11 w:11)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	fn transfer_multiple() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `12202`
		//  Estimated: `29403`
		// Minimum execution time: 431_499_000 picoseconds.
		Weight::from_parts(435_439_000, 29403)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(11_u64))
	}
	/// Storage: `SubspaceModule::Uids` (r:1 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:1 w:1)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	fn remove_stake() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2256`
		//  Estimated: `5721`
		// Minimum execution time: 91_246_000 picoseconds.
		Weight::from_parts(92_048_000, 5721)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:10 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:10 w:10)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:10 w:10)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	fn remove_stake_multiple() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `5046`
		//  Estimated: `30786`
		// Minimum execution time: 510_161_000 picoseconds.
		Weight::from_parts(524_134_000, 30786)
			.saturating_add(RocksDbWeight::get().reads(33_u64))
			.saturating_add(RocksDbWeight::get().writes(23_u64))
	}
	/// Storage: `SubspaceModule::SubnetNamespace` (r:3 w:0)
	/// Proof: `SubspaceModule::SubnetNamespace` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Founder` (r:1 w:1)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:1 w:0)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:0 w:1)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinStake` (r:0 w:1)
	/// Proof: `SubspaceModule::MinStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:0 w:1)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_network() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `703`
		//  Estimated: `9118`
		// Minimum execution time: 48_823_000 picoseconds.
		Weight::from_parts(49_470_000, 9118)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: `SubspaceModule::SubnetNamespace` (r:3 w:1)
	/// Proof: `SubspaceModule::SubnetNamespace` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Founder` (r:1 w:1)
	/// Proof: `SubspaceModule::Founder` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::N` (r:1 w:1)
	/// Proof: `SubspaceModule::N` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Stake` (r:2 w:1)
	/// Proof: `SubspaceModule::Stake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeFrom` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeFrom` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::StakeTo` (r:1 w:1)
	/// Proof: `SubspaceModule::StakeTo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalStake` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(108), added: 2583, mode: `MaxEncodedLen`)
	/// Storage: `SubspaceModule::Names` (r:1 w:1)
	/// Proof: `SubspaceModule::Names` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Address` (r:1 w:1)
	/// Proof: `SubspaceModule::Address` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:1 w:1)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Keys` (r:1 w:1)
	/// Proof: `SubspaceModule::Keys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TotalSubnets` (r:1 w:1)
	/// Proof: `SubspaceModule::TotalSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MinAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::LastUpdate` (r:0 w:1)
	/// Proof: `SubspaceModule::LastUpdate` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedWeights` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedWeights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Tempo` (r:0 w:1)
	/// Proof: `SubspaceModule::Tempo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MinStake` (r:0 w:1)
	/// Proof: `SubspaceModule::MinStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Dividends` (r:0 w:1)
	/// Proof: `SubspaceModule::Dividends` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Incentive` (r:0 w:1)
	/// Proof: `SubspaceModule::Incentive` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Trust` (r:0 w:1)
	/// Proof: `SubspaceModule::Trust` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Emission` (r:0 w:1)
	/// Proof: `SubspaceModule::Emission` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::ImmunityPeriod` (r:0 w:1)
	/// Proof: `SubspaceModule::ImmunityPeriod` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedUids` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedUids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn remove_network() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `4709`
		//  Estimated: `13124`
		// Minimum execution time: 186_506_000 picoseconds.
		Weight::from_parts(189_186_000, 13124)
			.saturating_add(RocksDbWeight::get().reads(16_u64))
			.saturating_add(RocksDbWeight::get().writes(24_u64))
	}
	/// Storage: `SubspaceModule::SubnetNamespace` (r:3 w:0)
	/// Proof: `SubspaceModule::SubnetNamespace` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Uids` (r:1 w:0)
	/// Proof: `SubspaceModule::Uids` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxNameLength` (r:1 w:0)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Names` (r:2 w:1)
	/// Proof: `SubspaceModule::Names` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::Address` (r:0 w:1)
	/// Proof: `SubspaceModule::Address` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_module() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `706`
		//  Estimated: `9121`
		// Minimum execution time: 62_618_000 picoseconds.
		Weight::from_parts(64_586_000, 9121)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: `SubspaceModule::MaxAllowedSubnets` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedSubnets` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxAllowedModules` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxAllowedModules` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxRegistrationsPerBlock` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxRegistrationsPerBlock` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::TxRateLimit` (r:0 w:1)
	/// Proof: `SubspaceModule::TxRateLimit` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::MaxNameLength` (r:0 w:1)
	/// Proof: `SubspaceModule::MaxNameLength` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	/// Storage: `SubspaceModule::UnitEmission` (r:0 w:1)
	/// Proof: `SubspaceModule::UnitEmission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn update_global() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 18_959_000 picoseconds.
		Weight::from_parts(19_511_000, 0)
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
}